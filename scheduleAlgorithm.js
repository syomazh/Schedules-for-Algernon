//impement algorithm later
//do some example for now

/*
 * SCHEDULING ALGORITHM
 * 
 * Problem Overview:
 * - High school courses: Must attend specific periods on different days (M/T/F + W/Th block)
 * - College courses: Must choose one section and attend all meetings
 * - Each course has an importance value (0-1)
 * - Goal: Maximize total importance while avoiding schedule conflicts
 * 
 * Algorithm Steps:
 * 
 * 1. INITIALIZATION
 *    - Create empty schedule
 *    - Sort all courses by importance (descending)
 * 
 * 2. COURSE SELECTION (Greedy Approach)
 *    - For each course in sorted order:
 *      a. Try to add to schedule without conflicts
 *      b. If conflict occurs:
 *         - Calculate sum of importance values of conflicting courses
 *         - If current course importance > sum of conflicting courses
 *           -> Remove conflicting courses, add current course
 *         - Else skip current course
 * 
 * 3. HIGH SCHOOL COURSE SCHEDULING
 *    - For each high school course:
 *      a. Find valid period assignments:
 *         - Mon, Tues, Fri: At least one period each day
 *         - Wed OR Thurs: One block period
 *      b. Check all possible period combinations
 *         - Choose combination with least conflicts
 *         - If multiple options, prefer earlier periods
 * 
 * 4. COLLEGE COURSE SCHEDULING
 *    - For each college course:
 *      a. Check each section for conflicts with existing schedule
 *      b. Add first non-conflicting section
 *      c. If all sections conflict, compare importance values
 * 
 * 5. CONFLICT DETECTION
 *    - Two courses conflict if:
 *      a. High school vs high school: Same period on same day
 *      b. High school vs college: College section meets during assigned high school period
 *      c. College vs college: Sections have overlapping meeting times
 * 
 */

/**
 * Generate an optimized schedule based on course importance
 * @param {Array} courses - Array of course objects
 * @param {Object} options - Optional configuration parameters
 * @param {Object} options.importanceValues - Object mapping course names to importance values (0-1)
 * @returns {Object} - Generated schedule information
 */
function generateSchedule(courses, options = {}) {
    return placeholderAlg(courses, options);
}


// Export function for use in index.html
if (typeof module !== 'undefined') {
    module.exports = { generateSchedule };
}


//alg that just makes all the courses greyed out

function placeholderAlg(courses, options = {}) {
    // Make a deep copy to avoid modifying original data
    const processedCourses = JSON.parse(JSON.stringify(courses));
    
    // Extract importance values from options, or use defaults
    const importanceValues = options.importanceValues || {};
    
    // Assign importance values to each course (default to 0.5 if not provided)
    processedCourses.forEach(course => {
        course.importance = importanceValues[course.name] || 0.5;
    });

    // Set all events to greyed out initially
    processedCourses.forEach(course => {
        if (course.renderableEvents) {
            course.renderableEvents.forEach(event => {
                event.isGreyedOut = true;
            });
        }
    });
    
    // Calculate total importance of scheduled courses
    const totalImportance = processedCourses.reduce((sum, course) => {
        // Add importance for courses that are scheduled (not greyed out)
        if (course.renderableEvents && course.renderableEvents.some(event => !event.isGreyedOut)) {
            return sum + course.importance;
        }
        return sum;
    }, 0);
    
    return {
        courses: processedCourses,
        totalImportance: totalImportance,
        message: "Schedule generated by placeholder alg1"
    };
}

function placeholderAlg2(courses, options = {}) {
    // Make a deep copy to avoid modifying original data
    const processedCourses = JSON.parse(JSON.stringify(courses));
    
    // Extract importance values from options, or use defaults
    const importanceValues = options.importanceValues || {};
    
    // Assign importance values to each course (default to 0.5 if not provided)
    processedCourses.forEach(course => {
        course.importance = importanceValues[course.name] || 0.5;
    });

    // Set all events to greyed out initially
    processedCourses.forEach(course => {
        if (course.renderableEvents) {
            course.renderableEvents.forEach(event => {
                event.isGreyedOut = true;
            });
        }
    });

    //DO NOR MODIFY THE ORIGINAL ORDER of processed coursed IT MESSES EVERYTHING UP when you return it
    
    // Instead of reordering the original array, create a prioritized index list
    const courseIndicesByPriority = [...Array(processedCourses.length).keys()]
        .sort((a, b) => processedCourses[b].importance - processedCourses[a].importance);
    
    // Process courses in priority order but keep original array order
    for (const index of courseIndicesByPriority) {
        const _course = processedCourses[index];
        
        // Process this high-priority course (enable its events)
        if (_course.renderableEvents) {
            _course.renderableEvents.forEach(event => {
                event.isGreyedOut = true;  // Enable high priority course
            });
        }
        
        // Add more scheduling logic here
        // You can use the courseIndicesByPriority array to process in order of importance
        // while keeping the original array structure intact
    }
    
    // Calculate total importance of scheduled courses
    const totalImportance = processedCourses.reduce((sum, course) => {
        // Add importance for courses that are scheduled (not greyed out)
        if (course.renderableEvents && course.renderableEvents.some(event => !event.isGreyedOut)) {
            return sum + course.importance;
        }
        return sum;
    }, 0);
    
    return {
        courses: processedCourses,
        totalImportance: totalImportance,
        message: "Schedule generated prioritizing by placeholder alg2"
    };
}



